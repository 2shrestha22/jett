// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Version (
  val string: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Version {
      val string = pigeonVar_list[0] as String?
      return Version(string)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      string,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is Version) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlatformFile (
  val uri: String,
  val name: String? = null,
  val size: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlatformFile {
      val uri = pigeonVar_list[0] as String
      val name = pigeonVar_list[1] as String?
      val size = pigeonVar_list[2] as Long?
      return PlatformFile(uri, name, size)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      uri,
      name,
      size,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PlatformFile) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class APKInfo (
  val name: String,
  val packageName: String,
  val fileName: String,
  val isSystemApp: Boolean,
  val isSplitApk: Boolean,
  val icon: ByteArray,
  /** Content URI */
  val contentUri: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): APKInfo {
      val name = pigeonVar_list[0] as String
      val packageName = pigeonVar_list[1] as String
      val fileName = pigeonVar_list[2] as String
      val isSystemApp = pigeonVar_list[3] as Boolean
      val isSplitApk = pigeonVar_list[4] as Boolean
      val icon = pigeonVar_list[5] as ByteArray
      val contentUri = pigeonVar_list[6] as String
      return APKInfo(name, packageName, fileName, isSystemApp, isSplitApk, icon, contentUri)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      packageName,
      fileName,
      isSystemApp,
      isSplitApk,
      icon,
      contentUri,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is APKInfo) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Version.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlatformFile.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          APKInfo.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Version -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PlatformFile -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is APKInfo -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val MessagesPigeonMethodCodec = StandardMethodCodec(MessagesPigeonCodec())

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface JettHostApi {
  fun getPlatformVersion(): Version
  fun getInitialFiles(): List<PlatformFile>
  fun getAPKs(withSystemApp: Boolean): List<APKInfo>

  companion object {
    /** The codec used by JettHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `JettHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: JettHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.sangamshrestha.jett.JettHostApi.getPlatformVersion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPlatformVersion())
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.sangamshrestha.jett.JettHostApi.getInitialFiles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getInitialFiles())
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.sangamshrestha.jett.JettHostApi.getAPKs$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val withSystemAppArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              listOf(api.getAPKs(withSystemAppArg))
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}

private class MessagesPigeonStreamHandler<T>(
    val wrapper: MessagesPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface MessagesPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class FilesStreamHandler : MessagesPigeonEventChannelWrapper<List<PlatformFile>> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: FilesStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.com.sangamshrestha.jett.JettEventChannelApi.files"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<List<PlatformFile>>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
